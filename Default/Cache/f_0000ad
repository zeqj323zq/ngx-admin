{"version":3,"sources":["webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/logout/logout.component.html","webpack:///./src/app/auth/register/register.component.html","webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/logout/logout.component.ts","webpack:///./src/app/auth/register/register.component.scss","webpack:///./src/app/auth/register/register.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">登录</h1>\\r\\n<p class=\\\"sub-title\\\">请登录你的邮箱账号</p>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>糟糕!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n<div ng-app=\\\"myApp\\\" ng-controller=\\\"SiteCtrl\\\">\\r\\n<form (ngSubmit) =\\\"login()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\" >\\r\\n    {{diagnostic}}\\r\\n\\r\\n  <!-- <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">邮箱账号:</label>\\r\\n    <input nbInput\\r\\n           fullWidth\\r\\n           [(ngModel)]=\\\"user.email\\\"\\r\\n           #email=\\\"ngModel\\\"\\r\\n           name=\\\"email\\\"\\r\\n           id=\\\"input-email\\\"\\r\\n           pattern=\\\".+@.+\\\\..+\\\"\\r\\n           placeholder=\\\"邮箱账号\\\"\\r\\n           autofocus\\r\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\r\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.required\\\">\\r\\n        邮箱账号不能为空!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.pattern\\\">\\r\\n        邮箱账号不存在!\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div> -->\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"name\\\">昵称:</label>\\r\\n    <input nbInput\\r\\n           [(ngModel)]=\\\"user.name\\\"\\r\\n           #name=\\\"ngModel\\\"\\r\\n           id=\\\"name\\\"\\r\\n           name=\\\"name\\\"\\r\\n           placeholder=\\\"昵称\\\"\\r\\n           autofocus\\r\\n           fullWidth\\r\\n           [required]=\\\"getConfigValue('forms.validation.name.required')\\\"\\r\\n           [minlength]=\\\"getConfigValue('forms.validation.name.minLength')\\\"\\r\\n           [maxlength]=\\\"getConfigValue('forms.validation.name.maxLength')\\\"\\r\\n           [attr.aria-invalid]=\\\"name.invalid && name.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"name.invalid && name.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"name.errors?.required\\\">\\r\\n        昵称不能为空!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"name.errors?.minlength || name.errors?.maxlength\\\">\\r\\n        昵称必须至少包括\\r\\n        from {{getConfigValue('forms.validation.name.minLength')}}\\r\\n        to {{getConfigValue('forms.validation.name.maxLength')}}\\r\\n        字符\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"password\\\">密码:</label>\\r\\n    <input nbInput\\r\\n           fullWidth\\r\\n           [(ngModel)]=\\\"user.password\\\"\\r\\n           #password=\\\"ngModel\\\"\\r\\n           name=\\\"password\\\"\\r\\n           type=\\\"password\\\"\\r\\n           id=\\\"password\\\"\\r\\n           placeholder=\\\"登录密码\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\r\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\r\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\r\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"password.invalid && password.touched \\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.required\\\">\\r\\n        密码不能为空!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\r\\n        密码必须包含\\r\\n        从 {{ getConfigValue('forms.validation.password.minLength') }}\\r\\n        到 {{ getConfigValue('forms.validation.password.maxLength') }}\\r\\n        的字符\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group accept-group\\\">\\r\\n    <nb-checkbox name=\\\"rememberMe\\\"  *ngIf=\\\"rememberMe\\\">记住账号和密码</nb-checkbox>\\r\\n    <!-- [(ngModel)]=\\\"user.rememberMe\\\" -->\\r\\n    <a class=\\\"forgot-password\\\" routerLink=\\\"../request-password\\\">忘记密码?</a>\\r\\n  </div>\\r\\n\\r\\n  <button nbButton\\r\\n          type=\\\"submit\\\"\\r\\n          fullWidth\\r\\n          status=\\\"success\\\"\\r\\n          [disabled]=\\\"submitted || !form.valid\\\"\\r\\n          [class.btn-pulse]=\\\"submitted\\\"\\r\\n          (click)=\\\"SignIn\\\"\\r\\n         >\\r\\n    登录\\r\\n  </button>\\r\\n</form>\\r\\n</div>\\r\\n\\r\\n<section *ngIf=\\\"socialLinks && socialLinks.length > 0\\\" class=\\\"links\\\" aria-label=\\\"Social sign in\\\">\\r\\n  or enter with:\\r\\n  <div class=\\\"socials\\\">\\r\\n    <ng-container *ngFor=\\\"let socialLink of socialLinks\\\">\\r\\n      <a *ngIf=\\\"socialLink.link\\\"\\r\\n         [routerLink]=\\\"socialLink.link\\\"\\r\\n         [attr.target]=\\\"socialLink.target\\\"\\r\\n         [attr.class]=\\\"socialLink.icon\\\"\\r\\n         [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n      <a *ngIf=\\\"socialLink.url\\\"\\r\\n         [attr.href]=\\\"socialLink.url\\\"\\r\\n         [attr.target]=\\\"socialLink.target\\\"\\r\\n         [attr.class]=\\\"socialLink.icon\\\"\\r\\n         [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section class=\\\"another-action\\\" aria-label=\\\"Register\\\">\\r\\n  还没有账号? <a class=\\\"text-link\\\" routerLink=\\\"../register\\\">注册</a>\\r\\n</section>\\r\\n\\r\\n<script>\\r\\n  \\r\\n  </script>\"","module.exports = \"<div>Logging out, please wait...</div>\"","module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">Register</h1>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<form (ngSubmit)=\\\"register()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\r\\n{{form.value|json}}\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-name\\\">Full name:</label>\\r\\n    <input nbInput\\r\\n           [(ngModel)]=\\\"user.name\\\"\\r\\n           #name=\\\"ngModel\\\"\\r\\n           id=\\\"input-name\\\"\\r\\n           name=\\\"name\\\"\\r\\n           placeholder=\\\"Full name\\\"\\r\\n           autofocus\\r\\n           fullWidth\\r\\n           [status]=\\\"name.dirty ? (name.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.name.required')\\\"\\r\\n           [minlength]=\\\"getConfigValue('forms.validation.name.minLength')\\\"\\r\\n           [maxlength]=\\\"getConfigValue('forms.validation.name.maxLength')\\\"\\r\\n           [attr.aria-invalid]=\\\"name.invalid && name.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"name.invalid && name.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"name.errors?.required\\\">\\r\\n        Full name is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"name.errors?.minlength || name.errors?.maxlength\\\">\\r\\n        Full name should contains\\r\\n        from {{getConfigValue('forms.validation.name.minLength')}}\\r\\n        to {{getConfigValue('forms.validation.name.maxLength')}}\\r\\n        characters\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n  \\r\\n  <!-- <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">Email address:</label>\\r\\n    <input nbInput\\r\\n           [(ngModel)]=\\\"user.email\\\"\\r\\n           #email=\\\"ngModel\\\"\\r\\n           id=\\\"input-email\\\"\\r\\n           name=\\\"email\\\"\\r\\n           pattern=\\\".+@.+..+\\\"\\r\\n           placeholder=\\\"Email address\\\"\\r\\n           fullWidth\\r\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\r\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.required\\\">\\r\\n        Email is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.pattern\\\">\\r\\n        Email should be the real one!\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div> -->\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-password\\\">Password:</label>\\r\\n    <input nbInput\\r\\n           [(ngModel)]=\\\"user.password\\\"\\r\\n           #password=\\\"ngModel\\\"\\r\\n           type=\\\"password\\\"\\r\\n           id=\\\"input-password\\\"\\r\\n           name=\\\"password\\\"\\r\\n           placeholder=\\\"Password\\\"\\r\\n           fullWidth\\r\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\r\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\r\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\r\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"password.invalid && password.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.required\\\">\\r\\n        Password is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\r\\n        Password should contains\\r\\n        from {{ getConfigValue('forms.validation.password.minLength') }}\\r\\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\\r\\n        characters\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n  \\r\\n  <div class=\\\"form\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-re-password\\\">Repeat password:</label>\\r\\n    <input nbInput\\r\\n          [(ngModel)]=\\\"user.confirmPassword\\\"\\r\\n           #rePass=\\\"ngModel\\\"\\r\\n           type=\\\"password\\\"\\r\\n           id=\\\"input-re-password\\\"\\r\\n           name=\\\"rePass\\\"\\r\\n           placeholder=\\\"Confirm Password\\\"\\r\\n           fullWidth\\r\\n           [status]=\\\"password.dirty ? (password.invalid || password.value != rePass.value  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\r\\n           [attr.aria-invalid]=\\\"rePass.invalid && rePass.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"rePass.invalid && rePass.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"rePass.errors?.required\\\">\\r\\n        Password confirmation is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.value != rePass.value && !rePass.errors?.required\\\">\\r\\n        Password does not match the confirm password.\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group accept-group\\\" *ngIf=\\\"getConfigValue('forms.register.terms')\\\">\\r\\n    <nb-checkbox name=\\\"terms\\\" [(ngModel)]=\\\"user.terms\\\" #terms=\\\"ngModel\\\" [required]=\\\"getConfigValue('forms.register.terms')\\\">\\r\\n      Agree to <a href=\\\"#\\\" target=\\\"_blank\\\"><strong>Terms & Conditions</strong></a>\\r\\n    </nb-checkbox>\\r\\n  </div>\\r\\n\\r\\n  <button nbButton\\r\\n          fullWidth\\r\\n          status=\\\"success\\\"\\r\\n          [disabled]=\\\"submitted || !form.valid\\\"\\r\\n          [class.btn-pulse]=\\\"submitted\\\">\\r\\n    Register\\r\\n  </button>\\r\\n</form>\\r\\n\\r\\n<section *ngIf=\\\"socialLinks && socialLinks.length > 0\\\" class=\\\"links\\\" aria-label=\\\"Social sign in\\\">\\r\\n  or enter with:\\r\\n  <div class=\\\"socials\\\">\\r\\n    <ng-container *ngFor=\\\"let socialLink of socialLinks\\\">\\r\\n      <a *ngIf=\\\"socialLink.link\\\"\\r\\n         [routerLink]=\\\"socialLink.link\\\"\\r\\n         [attr.target]=\\\"socialLink.target\\\"\\r\\n         [attr.class]=\\\"socialLink.icon\\\"\\r\\n         [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n      <a *ngIf=\\\"socialLink.url\\\"\\r\\n         [attr.href]=\\\"socialLink.url\\\"\\r\\n         [attr.target]=\\\"socialLink.target\\\"\\r\\n         [attr.class]=\\\"socialLink.icon\\\"\\r\\n         [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section class=\\\"another-action\\\" aria-label=\\\"Sign in\\\">\\r\\n  Already have an account? <a class=\\\"text-link\\\" routerLink=\\\"../login\\\">Log in</a>\\r\\n</section>\"","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CommonModule } from '@angular/common'\r\n\r\nimport {\r\n    NbAuthComponent,\r\n    NbLoginComponent,\r\n    NbLogoutComponent,\r\n    NbRegisterComponent,\r\n    NbRequestPasswordComponent,\r\n    NbResetPasswordComponent,\r\n  } from '@nebular/auth';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\n\r\nexport const routes: Routes = [\r\n    // .. 路由组件\r\n    {\r\n      path: '',\r\n      component: NbAuthComponent,\r\n      children: [\r\n        {\r\n          path: 'login',\r\n          component: LoginComponent,\r\n        },\r\n        {\r\n          path: 'register',\r\n          component: RegisterComponent,\r\n        },\r\n        {\r\n          path: 'logout',\r\n          component: LogoutComponent,\r\n        },\r\n        // {\r\n        //   path: '',\r\n        //   component: NbOAuth2LoginComponent,\r\n        // },\r\n        // {\r\n        //   path: 'callback',\r\n        //   component: NbOAuth2CallbackComponent,\r\n        // },\r\n        // {\r\n        //   path: '**',\r\n        //   redirectTo: 'auth',\r\n        //   pathMatch: 'full',\r\n        // },\r\n    ]\r\n    }\r\n  ];\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\n\r\nexport class AuthRoutingModule {\r\n}","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\n\r\nimport { \r\n  NbAuthModule,\r\n} from '@nebular/auth';\r\n\r\nimport { \r\n  NbAlertModule,\r\n  NbButtonModule,\r\n  NbCheckboxModule,\r\n  NbInputModule\r\n} from '@nebular/theme';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    NbAlertModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbCheckboxModule,\r\n    AuthRoutingModule,\r\n\r\n    NbAuthModule,\r\n  ],\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    LogoutComponent\r\n    // ... here goes our new components\r\n  ],\r\n})\r\n\r\nexport class AuthModule {\r\n}","import { NbLoginComponent } from '@nebular/auth';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { NB_AUTH_OPTIONS, NbAuthSocialLink } from '@nebular/auth';\r\nimport { getDeepFromObject } from '@nebular/auth';\r\nimport { NbAuthService } from '@nebular/auth';\r\nimport { NbAuthResult } from '@nebular/auth';\r\nimport { Serializer } from '@angular/compiler';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'ngx-login',\r\n  templateUrl: './login.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoginComponent {\r\n\r\n  redirectDelay: number = 0;\r\n  showMessages: any = {};\r\n  strategy: string = '';\r\n\r\n  errors: string[] = [];\r\n  messages: string[] = [];\r\n  user: any = {};\r\n  submitted: boolean = false;\r\n  socialLinks: NbAuthSocialLink[] = [];\r\n  rememberMe = false;\r\n\r\n  constructor(protected service: NbAuthService,\r\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\r\n              protected cd: ChangeDetectorRef,\r\n              protected router: Router,\r\n              protected httpClient: HttpClient,\r\n              ){\r\n\r\n    this.redirectDelay = this.getConfigValue('forms.login.redirectDelay');\r\n    this.showMessages = this.getConfigValue('forms.login.showMessages');\r\n    this.strategy = this.getConfigValue('forms.login.strategy');\r\n    this.socialLinks = this.getConfigValue('forms.login.socialLinks');\r\n    this.rememberMe = this.getConfigValue('forms.login.rememberMe');\r\n  }\r\n\r\n  login(): void {\r\n    // const httpOptions = { headers: new HttpHeaders({ 'content-type': 'application/json;charset=UTF-8'}), withCredentials: true };\r\n    //     this.httpClient.post('http://192.168.212.223:9999/winstore/api/user/login',this.user, httpOptions )\r\n    //         .subscribe(\r\n    //             response => {\r\n    //               console.log(response);\r\n    //             },error => {\r\n    //               this.errors = error;\r\n    //               console.log(error);\r\n    //             }\r\n    //         );\r\n    this.errors = [];\r\n    this.messages = [];\r\n    this.submitted = true;\r\n\r\n    this.service.authenticate(this.strategy, this.user).subscribe((result: NbAuthResult) => {\r\n      this.submitted = false;\r\n\r\n      if (result.isSuccess()) {\r\n        this.messages = result.getMessages();\r\n      } else {\r\n        this.errors = result.getErrors();\r\n      }\r\n\r\n      const redirect = result.getRedirect();\r\n      if (redirect) {\r\n        setTimeout(() => {\r\n          return this.router.navigateByUrl(redirect);\r\n        }, this.redirectDelay);\r\n      }\r\n      this.cd.detectChanges();\r\n    });\r\n  }\r\n\r\n  model = this.user;\r\n  get diagnostic() { return JSON.stringify(this.model); }\r\n\r\n  getConfigValue(key: string): any {\r\n    return getDeepFromObject(this.options, key, null);\r\n  }\r\n}","/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { Component, Inject, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { NB_AUTH_OPTIONS } from '@nebular/auth';\r\nimport { getDeepFromObject } from '@nebular/auth';\r\nimport { NbAuthService } from '@nebular/auth';\r\nimport { NbAuthResult } from '@nebular/auth';\r\n\r\n@Component({\r\n  selector: 'nb-logout',\r\n  templateUrl: './logout.component.html',\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n\r\n  redirectDelay: number = 0;\r\n  strategy: string = '';\r\n\r\n  constructor(protected service: NbAuthService,\r\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\r\n              protected router: Router) {\r\n    this.redirectDelay = this.getConfigValue('forms.logout.redirectDelay');\r\n    this.strategy = this.getConfigValue('forms.logout.strategy');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.logout(this.strategy);\r\n  }\r\n\r\n  logout(strategy: string): void {\r\n    this.service.logout(strategy).subscribe((result: NbAuthResult) => {\r\n\r\n      const redirect = result.getRedirect();\r\n      if (redirect) {\r\n        setTimeout(() => {\r\n          return this.router.navigateByUrl(redirect);\r\n        }, this.redirectDelay);\r\n      }\r\n    });\r\n  }\r\n\r\n  getConfigValue(key: string): any {\r\n    return getDeepFromObject(this.options, key, null);\r\n  }\r\n}","module.exports = \"/**\\r\\n * @license\\r\\n * Copyright Akveo. All Rights Reserved.\\r\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\r\\n */\\n:host .title {\\n  margin-bottom: 2rem; }\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9yZWdpc3Rlci9EOlxcYW5ndWxhcmpzXFxuZ3gtYWRtaW4vc3JjXFxhcHBcXGF1dGhcXHJlZ2lzdGVyXFxyZWdpc3Rlci5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXV0aC9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztFQ0lFO0FEQ0Q7RUFFSyxtQkFBbUIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi9cclxuIDpob3N0IHtcclxuICAgIC50aXRsZSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgICB9XHJcbiAgfSIsIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqL1xuOmhvc3QgLnRpdGxlIHtcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTsgfVxuIl19 */\"","/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\r\nimport { NbRegisterComponent } from '@nebular/auth';\r\nimport { Router } from '@angular/router';\r\nimport { NB_AUTH_OPTIONS, NbAuthSocialLink } from '@nebular/auth';\r\nimport { getDeepFromObject } from '@nebular/auth';\r\n\r\nimport { NbAuthService } from'@nebular/auth';\r\nimport { NbAuthResult } from '@nebular/auth';\r\n\r\n\r\n@Component({\r\n  selector: 'nb-register',\r\n  styleUrls: ['./register.component.scss'],\r\n  templateUrl: './register.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RegisterComponent {\r\n\r\n  redirectDelay: number = 0;\r\n  showMessages: any = {};\r\n  strategy: string = '';\r\n\r\n  submitted = false;\r\n  errors: string[] = [];\r\n  messages: string[] = [];\r\n  user: any = {};\r\n  socialLinks: NbAuthSocialLink[] = [];\r\n\r\n  constructor(protected service: NbAuthService,\r\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\r\n              protected cd: ChangeDetectorRef,\r\n              protected router: Router) {\r\n\r\n    this.redirectDelay = this.getConfigValue('forms.register.redirectDelay');\r\n    this.showMessages = this.getConfigValue('forms.register.showMessages');\r\n    this.strategy = this.getConfigValue('forms.register.strategy');\r\n    this.socialLinks = this.getConfigValue('forms.login.socialLinks');\r\n  }\r\n\r\n  register(): void {\r\n    this.errors = this.messages = [];\r\n    this.submitted = true;\r\n\r\n    this.service.register(this.strategy, this.user).subscribe((result: NbAuthResult) => {\r\n      this.submitted = false;\r\n      if (result.isSuccess()) {\r\n        this.messages = result.getMessages();\r\n      } else {\r\n        this.errors = result.getErrors();\r\n      }\r\n\r\n      const redirect = result.getRedirect();\r\n      if (redirect) {\r\n        setTimeout(() => {\r\n          return this.router.navigateByUrl(redirect);\r\n        }, this.redirectDelay);\r\n      }\r\n      this.cd.detectChanges();\r\n    });\r\n  }\r\n\r\n  getConfigValue(key: string): any {\r\n    return getDeepFromObject(this.options, key, null);\r\n  }\r\n}"],"sourceRoot":""}